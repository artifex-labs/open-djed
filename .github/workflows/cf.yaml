name: Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    paths:
      - 'packages/app/**'
  push:
    branches:
      - main
    paths:
      - 'packages/app/**'

jobs:
  deploy-pr:
    if: github.event.action != 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/app

    steps:
      - uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Deploy preview Worker
        run: |
          BRANCH_NAME="pr-${{ github.event.pull_request.number }}"
          bun run deploy \
            --name reverse-djed-app-${BRANCH_NAME} \
            --route "https://${BRANCH_NAME}.djed.artifex.finance/*"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

  delete-preview:
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/app

    steps:
      - uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Delete preview Worker
        run: |
          BRANCH_NAME="pr-${{ github.event.pull_request.number }}"
          bunx wrangler delete reverse-djed-app-${BRANCH_NAME} --yes
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

  deploy-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/app

    steps:
      - uses: actions/checkout@v4

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Deploy to Mainnet (Production)
        run: |
          bun run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}

      - name: Deploy to Preprod
        run: |
          CLOUDFLARE_ENV=preprod bun run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
